---

# --------------------------------------------------
# INSTALLATION DEPENDENCIES
# --------------------------------------------------

- name: Install necessary packages
  apt:
    name: "{{ item }}"
    force: true
    update_cache: true
    install_recommends: false
  with_items:
    - nginx
    - libpcre3-dev
    - build-essential
    - libssl-dev
    - php7.0-cli
    - php7.0-fpm
    - php7.0-cgi
    - psmisc
    - spawn-fcgi
    - fcgiwrap
    - libgd-dev
    - openssl
    - libssl-dev
    - apache2-utils
    - unzip
    - git
    - autoconf
    - gcc
    - libc6
    - libmcrypt-dev
    - make
    - wget
  tags: nagios_install

# --------------------------------------------------
# INSTALLATION NAGIOS CORE
# --------------------------------------------------
- name: Create nagios system group
  group:
    name: nagios
  tags: nagios_install

- name: Create nagios command system group
  group:
    name: nagcmd
  tags: nagios_install

- name: Create nagios system user
  user:
    system: true
    name: nagios
    group: nagios
    groups: nagcmd
  tags: nagios_install

- name: Create www-data system user
  user:
    system: true
    append: true
    name: www-data
    groups: nagcmd
  tags: nagios_install

- name: Retrieve and Uncompress Nagios Core
  unarchive:
    src: https://github.com/NagiosEnterprises/nagioscore/releases/download/nagios-4.3.4/nagios-4.3.4.tar.gz
    remote_src: true
    dest: /root/
  register: core_downloaded
  tags: nagios_install

- name: Initial configuration Nagios Core
  command: ./configure --with-nagios-group=nagios --with-command-group=nagcmd
  args:
    chdir: /root/nagios-4.3.4
  when: core_downloaded.skipped is not defined
  tags: nagios_install

- name: Make nagios-core
  make:
    chdir: /root/nagios-4.3.4
    target: "{{ item }}"
  with_items:
    - all
    - install
    - install-commandmode
    - install-init
    - install-config
  when: core_downloaded.skipped is not defined
  tags: nagios_install

# --------------------------------------------------
# INSTALLATION NAGIOS PLUGINS
# --------------------------------------------------
- name: Retrieve and Uncompress Nagios Plugins
  unarchive:
    src: https://github.com/nagios-plugins/nagios-plugins/releases/download/release-2.2.1/nagios-plugins-2.2.1.tar.gz
    remote_src: true
    dest: /root/
  register: plugins_downloaded
  tags: nagios_install

- name: Initial configuration Nagios Plugins
  command: ./configure --with-nagios-group=nagios --with-command-group=nagcmd --with-openssl
  args:
    chdir: /root/nagios-plugins-2.2.1
  when: plugins_downloaded.skipped is not defined
  tags: nagios_install

- name: Make nagios-plugins
  make:
    chdir: /root/nagios-plugins-2.2.1
    target: "{{ item }}"
  with_items:
    - all
    - install
  when: plugins_downloaded.skipped is not defined
  tags: nagios_install

# --------------------------------------------------
# INSTALLATION NAGIOS NRPE
# --------------------------------------------------
- name: Retrieve and Uncompress Nagios NRPE
  unarchive:
    src: https://github.com/NagiosEnterprises/nrpe/releases/download/nrpe-3.2.1/nrpe-3.2.1.tar.gz
    remote_src: true
    dest: /root/
  register: nrpe_downloaded
  tags: nagios_install

- name: Initial configuration Nagios NRPE
  command: ./configure --enable-command-args --with-nagios-user=nagios --with-nagios-group=nagios --with-ssl=/usr/bin/openssl --with-ssl-lib=/usr/lib/x86_64-linux-gnu
  args:
    chdir: /root/nrpe-3.2.1
  when: nrpe_downloaded.skipped is not defined
  tags: nagios_install

- name: Make nagios NRPE
  make:
    chdir: /root/nrpe-3.2.1
    target: "{{ item }}"
  with_items:
    - check_nrpe
    - install-plugin
  when: nrpe_downloaded.skipped is not defined
  tags: nagios_install

# --------------------------------------------------
# DEMARRAGE NAGIOS
# --------------------------------------------------
- name: Enable and start Nagios
  service:
    name: nagios
    state: started
    enabled: true
  tags: nagios_install

# --------------------------------------------------
# AJOUT CUSTOM SCRIPTs
# --------------------------------------------------
- name: get custom scripts from gitlab
  git: repo="https://sources.le-filament.com/lefilament/nagios-plugin.git" dest="/usr/local/nagios/libexec/custom"
  tags: nagios_config

- name: set file rights on custom plugins
  file: name={{ item }} mode=0555
  with_items:
    - /usr/local/nagios/libexec/custom/check_mem
    - /usr/local/nagios/libexec/custom/check_fail2ban
  tags: nagios_config

- name: get ssl certificate verification module from github
  get_url:
    url: https://raw.githubusercontent.com/matteocorti/check_ssl_cert/v1.56.0/check_ssl_cert
    dest: /usr/local/nagios/libexec/custom/check_ssl_cert
    mode: '0555'
  tags: nagios_config

- name: copy configuration files
  copy:
    src: "{{ item }}"
    dest: /usr/local/nagios/etc/{{ item }}
    mode: '0644'
    owner: nagios
    group: nagios
  with_items:
    - cgi.cfg
    - nagios.cfg
  notify: restart nagios
  tags: nagios_config

- name: copy htpasswd configuration file
  copy:
    src: htpasswd.users
    dest: /usr/local/nagios/etc/htpasswd.users
    mode: '0644'
    owner: root
    group: root
  notify: restart nagios
  tags: nagios_config

- name: copy CSS files
  copy:
    src: "{{ item }}"
    dest: /usr/local/nagios/share/stylesheets/{{ item }}
    mode: '0644'
    owner: nagios
    group: nagios
  with_items:
    - common.css
    - tac.css
  notify: restart nagios
  tags: nagios_config

- name: install objects configuration files
  template:
    src: "{{ item }}.j2"
    dest: /usr/local/nagios/etc/objects/{{ item }}
    mode: '0644'
    owner: nagios
    group: nagios
  with_items:
    - serveurs-odoo.cfg
    - templates.cfg
    - localhost.cfg
    - contacts.cfg
    - commands.cfg
    - windows.cfg
  notify: restart nagios
  tags: nagios_config

# --------------------------------------------------
# CONFIGURATION NGINX/Let's Encrypt
# --------------------------------------------------
- name: update apt repository with certbot one
  apt_repository: repo="ppa:certbot/certbot"
  tags: nagios_proxy

- name: install certbot for nginx
  apt: name=python-certbot-nginx update_cache=yes force=yes install_recommends=no
  tags: nagios_proxy

- name: install certificate
  command: "certbot --nginx -n --domains {{ nagios_url }} --agree-tos -m {{ default_maintenance_email }}"
  tags: nagios_proxy

- name: add cron job to renew certificate every monday
  cron:
    name: renew certificate
    minute: "30"
    hour: "2"
    weekday: "1"
    job: certbot renew >> /var/log/le-renew.log
  tags: nagios_proxy

- name: Configure Nginx
  template:
    src: nagios.j2
    dest: /etc/nginx/sites-available/nagios
    mode: '0644'
  notify: restart nginx
  tags: nagios_proxy

- name: "Enable nginx configuration"
  file: src="/etc/nginx/sites-available/nagios" dest="/etc/nginx/sites-enabled/nagios" state=link
  notify: restart nginx
  tags: nagios_proxy

- name: Remove default Nginx configuration
  file: path="/etc/nginx/sites-enabled/default" state=absent
  notify: restart nginx
  tags: nagios_proxy
